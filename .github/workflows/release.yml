name: Release 3 - Publish Release
run-name: Publish Release ${{ inputs.version }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Metabase version (e.g. v0.46.3)"
        type: string
        required: true
      commit:
        description: "A full-length commit SHA-1 hash"
        required: true

jobs:
  check-version:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    outputs:
      ee: ${{ fromJson(steps.canonical_version.outputs.result).ee }}
      oss: ${{ fromJson(steps.canonical_version.outputs.result).oss }}
    steps:
      - name: Fail early on the incorrect version format
        if: ${{ !(startsWith(inputs.version,'v0.') || startsWith(inputs.version,'v1.')) }}
        run: |
          echo "The version format is invalid!"
          echo "It must start with either 'v0.' or 'v1.'."
          echo "Please, try again."
          exit 1
      - uses: actions/checkout@v3
        with:
          sparse-checkout: release
      - name: Prepare build scripts
        run: cd ${{ github.workspace }}/release && yarn && yarn build
      - name: Get Release Version
        uses: actions/github-script@v6
        id: canonical_version
        with:
          script: |
            const { isValidVersionString, getCanonicalVersion, hasBeenReleased } = require('${{ github.workspace }}/release/dist/index.cjs');

            const version = '${{ inputs.version }}';

            if (!isValidVersionString(version)) {
              throw new Error("The version format is invalid! It must start with either 'v0.' or 'v1.'.");
            }

            const versions = {
              ee: getCanonicalVersion(version, 'ee'),
              oss: getCanonicalVersion(version, 'oss'),
            };

            const ossReleased = await hasBeenReleased({
              github,
              owner: context.repo.owner,
              repo: context.repo.repo,
              version: versions.oss,
            });

            if (ossReleased) {
              throw new Error("This version has already been released!", version);
            }

            return versions;

  download-uberjar:
    needs: check-version
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    strategy:
      matrix:
        edition: [oss]
    steps:
      - name: find_release_artifact
        id: find_release_artifact
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const fs = require('fs');

            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: `metabase-${{ matrix.edition }}-${{ inputs.commit }}-uberjar`,
              per_page: 1,
            });

            if (!artifacts.data?.artifacts?.[0]?.id) {
              throw new Error(`No artifacts found for ${{ inputs.commit }}`);
            }

            const artifact_id = artifacts.data.artifacts[0].id;

            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact_id,
              archive_format: 'zip',
            });

            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/mb.zip`, Buffer.from(download.data));
      - name: unzip uberjar artifact
        run: unzip mb.zip
      - name: Verify that this is a valid JAR file
        run: file --mime-type ./metabase.jar | grep "application/zip"
      - name: Reveal its version.properties
        run: jar xf metabase.jar version.properties && cat version.properties
      - name: Check JAR version properties
        run: |
          # ensure actual jar checksum matches checksum file
          grep -q $(sha256sum ./metabase.jar) SHA256.sum && echo "checksums match" || (echo "checksum mismatch" && exit 1)

          # ensure stored commit-id file matches input commit
          grep -q ${{ inputs.commit }} COMMIT-ID && echo "commit ids match" || (echo "commit-id mismatch" && exit 1)

          # ensure version.properties partial commit matches commit input
          grep -q $(cut -c 1-7 <<< ${{ inputs.commit }}) version.properties && echo "version.properties commit matches" || (echo "version.properties commit mismatch" && exit 1)

          # ensure version.properties version number matches input version (without v0/v1 to make it ee/oss agnostic)
          grep -q $(cut -c 3-99 <<< ${{ inputs.version }}) version.properties && echo "version.properties version number matches" || (echo "version.properties version number mismatch" && exit 1)

          # ensure the build is not a snapshot build
          grep -q "SNAPSHOT" version.properties && (echo "jar is a snapshot" && exit 1) || echo "jar is not a snapshot build"
      - name: Upload Uberjar as artifact
        uses: actions/upload-artifact@v3
        with:
          name: metabase-${{ matrix.edition }}-uberjar
          path: |
            ./metabase.jar
            ./COMMIT-ID
            ./SHA256.sum
            ./version.properties

  containerize:
    runs-on: ubuntu-22.04
    needs: [check-version, download-uberjar]
    timeout-minutes: 15
    strategy:
      matrix:
        edition: [oss]
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # IMPORTANT! to get all the tags
      - name: prepare release scripts
        run: cd release && yarn && yarn build
      - name: Determine the docker version tag
        uses: actions/github-script@v6
        id: canonical_version
        with:
          result-encoding: string
          script: |
            const version = '${{ inputs.version }}';
            const edition = '${{ matrix.edition }}';

            const canonical_version = edition === 'ee'
              ? '${{ needs.check-version.outputs.ee }}'
              : '${{ needs.check-version.outputs.oss }}';

            console.log("The canonical version of this Metabase", edition, "edition is", canonical_version);

            return canonical_version;
      - name: Check if the container image should be tagged as latest
        uses: actions/github-script@v6
        id: latest_version_check
        with:
          result-encoding: string
          script: |
            const { execSync } = require("child_process");
            const { isLatestVersion } = require('${{ github.workspace }}/release/dist/index.cjs');

            const currentTag = '${{ inputs.version }}';
            const allTags = execSync("git tag -l").toString("utf-8").split("\n");

            const isLatest = isLatestVersion(currentTag, allTags);

            console.log("Latest version?", isLatest);

            return isLatest ? "latest" : "not-latest";
      - uses: actions/download-artifact@v3
        name: Retrieve previously downloaded Uberjar
        with:
          name: metabase-${{ matrix.edition }}-uberjar
      - name: Move the Uberjar to the context dir
        run: mv ./metabase.jar bin/docker/.
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host
      - name: Build ${{ matrix.edition }} container
        uses: docker/build-push-action@v3
        with:
          context: bin/docker/.
          platforms: linux/amd64
          network: host
          tags: localhost:5000/local-metabase:${{ steps.canonical_version.outputs.result }}
          no-cache: true
          push: true
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Launch container
        run: docker run --rm -dp 3000:3000 localhost:5000/local-metabase:${{ steps.canonical_version.outputs.result }}
        timeout-minutes: 5
      - name: Wait for Metabase to start
        run: while ! curl -s 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done
        timeout-minutes: 3

      - name: Determine the target Docker Hub repository
        run: |
          if [[ "${{ matrix.edition }}" == "ee" ]]; then
            echo "Metabase EE: image is going to be pushed to ${{ github.repository_owner }}/metabase-enterprise"
            echo "DOCKERHUB_REPO=ghcr.io/${{ github.repository_owner }}/metabase-enterprise" >> $GITHUB_ENV
          else
            echo "Metabase OSS: image is going to be pushed to ${{ github.repository_owner }}/metabase"
            IMAGE_ID=ghcr.io/${{ github.repository_owner }}/metabase
            IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
            echo "DOCKERHUB_REPO=$IMAGE_ID" >> $GITHUB_ENV
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: Retag and push container image to Docker Hub
        run: |
          echo "Pushing ${{ steps.canonical_version.outputs.result }} to ${{ env.DOCKERHUB_REPO }} ..."
          docker tag localhost:5000/local-metabase:${{ steps.canonical_version.outputs.result }} ${{ env.DOCKERHUB_REPO }}:${{ steps.canonical_version.outputs.result }}
          docker push ${{ env.DOCKERHUB_REPO }}:${{ steps.canonical_version.outputs.result }}
          echo "Finished!"

      - name: Tag the container image as latest
        if: ${{ steps.latest_version_check.outputs.result == 'latest' }}
        run: |
          echo "Pushing ${{ env.DOCKERHUB_REPO }}:latest ..."
          docker tag localhost:5000/local-metabase:${{ steps.canonical_version.outputs.result }} ${{ env.DOCKERHUB_REPO }}:latest
          docker push ${{ env.DOCKERHUB_REPO }}:latest
          echo "Finished!"

  verify-docker-pull:
    runs-on: ubuntu-22.04
    needs: containerize
    timeout-minutes: 15
    strategy:
      matrix:
        edition: [oss]
    steps:
      - name: Login to Docker Hub # authenticated, to avoid being rate-throttled
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: Determine the container image to pull
        run: |
          if [[ "${{ matrix.edition }}" == "ee" ]]; then
            echo "Metabase EE: image is going to be pushed to ${{ github.repository_owner }}/metabase-enterprise"
            echo "DOCKERHUB_REPO=ghcr.io/${{ github.repository_owner }}/metabase-enterprise" >> $GITHUB_ENV
          else
            echo "Metabase OSS: image is going to be pushed to ${{ github.repository_owner }}/metabase"
            IMAGE_ID=ghcr.io/${{ github.repository_owner }}/metabase
            IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
            echo "DOCKERHUB_REPO=$IMAGE_ID" >> $GITHUB_ENV
          fi
      - name: Determine the docker version tag
        uses: actions/github-script@v6
        id: canonical_version
        with:
          result-encoding: string
          script: |
            const version = '${{ inputs.version }}';
            const edition = '${{ matrix.edition }}';

            const canonical_version = edition === "ee"
              ? version.replace(/^v0\./, "v1.") // always e.g. v1.47.2
              : version.replace(/^v1\./, "v0."); // always e.g. v0.47.2

            console.log("The canonical version of this Metabase", edition, "edition is", canonical_version);

            return canonical_version;
      - name: Pull the container image
        run: |
          echo "Pulling container image ${{ env.DOCKERHUB_REPO }}:${{ steps.canonical_version.outputs.result }} ..."
          docker pull ${{ env.DOCKERHUB_REPO }}:${{ steps.canonical_version.outputs.result }}
          echo "Successful!"
      - name: Launch container
        run: docker run --rm -dp 3000:3000 ${{ env.DOCKERHUB_REPO }}:${{ steps.canonical_version.outputs.result }}
        timeout-minutes: 5
      - name: Wait for Metabase to start
        run: while ! curl -s 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done
        timeout-minutes: 3

  push-tags:
    permissions: write-all
    needs: [verify-docker-pull, check-version]
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    strategy:
      matrix:
        edition: [oss]
    steps:
      - uses: actions/checkout@v3
        with:
          sparse-checkout: release
      - name: prepare release scripts
        run: cd release && yarn && yarn build
      - name: Tag Release
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const { tagRelease, getCanonicalVersion } = require('${{ github.workspace }}/release/dist/index.cjs');

            const version = '${{ inputs.version }}';
            const edition = '${{ matrix.edition }}';

            const canonical_version = edition === 'ee'
              ? '${{ needs.check-version.outputs.ee }}'
              : '${{ needs.check-version.outputs.oss }}';

            console.log("The canonical version of this Metabase", edition, "edition is", canonical_version);

            await tagRelease({
              github,
              owner: context.repo.owner,
              repo: context.repo.repo,
              version: canonical_version,
              commitHash: '${{ inputs.commit }}',
            }).catch((err) => {
              console.error('Failed to tag release', canonical_version, err);
              process.exit(1);
            });
